[{"C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\index.js":"1","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\reportWebVitals.js":"2","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\App.js":"3","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudApp.js":"4","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudInput.js":"5","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudList.js":"6","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudListItem.js":"7"},{"size":525,"mtime":1609665247527,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":528,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4806,"mtime":1609664829175,"results":"12","hashOfConfig":"9"},{"size":2292,"mtime":1609664892906,"results":"13","hashOfConfig":"9"},{"size":2475,"mtime":1609664963532,"results":"14","hashOfConfig":"9"},{"size":4275,"mtime":1609665015393,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kq0sb0",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},"C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\index.js",[],"C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\reportWebVitals.js",[],["35","36"],"C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\App.js",[],"C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudApp.js",["37"],"//외부에서 컴포넌트 불러오기\r\nimport React, { Component } from 'react';\r\nimport CrudInput from './CrudInput';\r\nimport CrudList from './CrudList';\r\n\r\nclass CrudApp extends React.Component {\r\n    \r\n    static defaultProps = {  /*  props의 디폴트 값 설정 */  } \r\n    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ } \r\n    state = {\r\n        // 상태값(변수)을 정의한다.\r\n        list: [\r\n            { id: 1, name: \"슈퍼맨\", power: 100 },\r\n            { id: 2, name: \"아쿠아맨\", power: 300 },\r\n            { id: 3, name: \"스파이더맨\", power: 500 },\r\n            { id: 4, name: \"배트맨\", power: 30 },\r\n        ],\r\n    }\r\n    style = {\r\n        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.\r\n\r\n    }\r\n    func = {\r\n        // fucn에 정의된 메서드는 반드시 constructor에서 this bind() 해야 한다.\r\n        doIns(obj){\r\n            // this.state.list.push( obj );\r\n            // 작업순서\r\n            // 1.this.state.listㅇ서 최대값\r\n            // 2. this.state.;list.push(obj);\r\n\r\n            /*\r\n            1. this.state.list에서 max(id)구하기\r\n            reduce() 사용하는 방법\r\n            map()과 Math.max()를 사용하는 방법\r\n            */\r\n\r\n            if(this.state.list.length > 0 ){\r\n                const maxitem = this.state.list.reduce( (prev,  next) =>{\r\n                    return prev.id > next.id ? prev : next;\r\n                })\r\n                obj.id = maxitem.id + 1;\r\n            }\r\n            else {\r\n                obj.id = 1;\r\n            }\r\n\r\n            //신규 리스트 생성.\r\n            const newlist = [ ...this.state.list, obj ];\r\n            this.setState({\r\n                ...this.state,\r\n                list: newlist,\r\n            })\r\n        },\r\n        doDel (index, item){\r\n            const r = window.confirm(\"정말로 삭제하시겠습니까?\");\r\n            if(!r) return false;\r\n\r\n            //배열에서 삭제\r\n            const id = item.id;\r\n            //삭제할 item을 제외한 배열 만들기\r\n            const newlist = this.state.list.filter((item, index)=>{\r\n                return item.id !== id;\r\n            })\r\n            this.setState({\r\n                ...this.sate,\r\n                list : newlist\r\n            })\r\n        },\r\n        doUp (index, item){\r\n           const id = item.id;\r\n           \r\n           const newlist = this.state.list.filter((item, index)=>{\r\n               if(item.id === id){\r\n                   item.power = Number(item.power) + 100;\r\n               }\r\n                return item;\r\n            })\r\n            this.setState({\r\n                ...this.sate,\r\n                list : newlist\r\n            })\r\n\r\n        },\r\n        doDown (index, item){\r\n            const id = item.id;\r\n           \r\n           const newlist = this.state.list.filter((item, index)=>{\r\n               if(item.id === id){\r\n                   item.power = Number(item.power) - 50;\r\n               }\r\n                return item;\r\n            })\r\n            this.setState({\r\n                ...this.sate,\r\n                list : newlist\r\n            })\r\n        },\r\n        doSave(newitem){\r\n            const id = newitem.id;\r\n            const newlist = this.state.list.filter((item, index)=>{\r\n               if(item.id === id){\r\n                   return newitem;\r\n               }else{\r\n                    return item;\r\n               }\r\n            })\r\n            this.setState({\r\n                ...this.sate,\r\n                list : newlist\r\n            })\r\n        }\r\n\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // this 바인딩\r\n        this.func.doIns = this.func.doIns.bind(this);\r\n\r\n        this.func.doDel = this.func.doDel.bind(this);\r\n        this.func.doUp = this.func.doUp.bind(this);\r\n        this.func.doDown = this.func.doDown.bind(this);\r\n        this.func.doSave = this.func.doSave.bind(this);\r\n        \r\n        // ref 만들기\r\n        \r\n    }\r\n    componentDidMount() {\r\n        // 마운트 완료 후에  : 페이지 load 될 때 한번\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 업데이트 완료 후에 : 여러번, state 가 변경될 때마다\r\n    }\r\n    componentWillUnmount() {\r\n        // 언마운트 완료 후에 : 페이지 unload 될 때 한번\r\n    }\r\n    handler = (event)=>{\r\n        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다\r\n        console.log(event.target);//\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CrudInput {...this.func}></CrudInput>\r\n                <hr />\r\n                <CrudList {...this.state} {...this.func}></CrudList>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CrudApp;","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudInput.js",["38"],"//외부에서 컴포넌트 불러오기\r\nimport React, { Component } from 'react';\r\n\r\nclass CrudInput extends React.Component {\r\n    \r\n    static defaultProps = {  /*  props의 디폴트 값 설정 */  } \r\n    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ } \r\n    state = {\r\n        // 상태값(변수)을 정의한다.\r\n        user: {\r\n            name: null,\r\n            power: 0,\r\n        },\r\n    }\r\n    style = {\r\n        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.\r\n\r\n    }\r\n    func = {\r\n        // fucn에 정의된 메서드는 반드시 constructor에서 this bind() 해야 한다.\r\n\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // this 바인딩\r\n        \r\n        // ref 만들기\r\n        this.refName = React.createRef();\r\n        this.refPower = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        // 마운트 완료 후에  : 페이지 load 될 때 한번\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 업데이트 완료 후에 : 여러번, state 가 변경될 때마다\r\n    }\r\n    componentWillUnmount() {\r\n        // 언마운트 완료 후에 : 페이지 unload 될 때 한번\r\n    }\r\n    doIns = (event)=>{\r\n        // 유효성 검사.\r\n        //debugger;\r\n        // 부모 state.list 에 추가 \r\n        const obj = {\r\n            id: null,\r\n            name: this.refName.current.value,\r\n            power: Number(this.refPower.current.value),\r\n        }\r\n        this.props.doIns( obj );\r\n\r\n        //init  초기화\r\n        this.refName.current.value = \"\";\r\n        this.refPower.current.value = \"\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Creat Read Update Delete</h1>\r\n                <div>\r\n                    <label htmlFor=\"\">Name : </label>\r\n                    <input type=\"text\" ref={this.refName} placeholder={\"이름을 입력하세요\"} />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"\">Power : </label>\r\n                    <input type=\"text\" ref={this.refPower} placeholder={\"숫자만 입력하세요\"} />\r\n                </div>\r\n                <button onClick={this.doIns} >Add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CrudInput;\r\n","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudList.js",["39","40"],"//외부에서 컴포넌트 불러오기\r\nimport React, { Component } from 'react';\r\nimport CrudListItem from './CrudListItem';\r\n\r\nclass CrudList extends React.Component {\r\n    \r\n    static defaultProps = {  /*  props의 디폴트 값 설정 */  } \r\n    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ } \r\n    state = {\r\n        // 상태값(변수)을 정의한다.\r\n\r\n    }\r\n    style = {\r\n        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.\r\n\r\n    }\r\n    func = {\r\n        // fucn에 정의된 메서드는 반드시 constructor에서 this bind() 해야 한다.\r\n\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // this 바인딩\r\n        \r\n        // ref 만들기\r\n        \r\n    }\r\n    componentDidMount() {\r\n        // 마운트 완료 후에  : 페이지 load 될 때 한번\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 업데이트 완료 후에 : 여러번, state 가 변경될 때마다\r\n    }\r\n    componentWillUnmount() {\r\n        // 언마운트 완료 후에 : 페이지 unload 될 때 한번\r\n    }\r\n    \r\n    render() {\r\n        const list = this.props.list; // CrudApp.state.list\r\n\r\n        const arrs = list.map((item, index)=>{\r\n            // item = {id:\"\", name:\"\", power:\"\"}\r\n            return(\r\n                /*\r\n                <tr className=\"\" key={index}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.power}</td>\r\n                    <td>\r\n                        <button onClick={this.doDel}>Del</button>\r\n                        <button onClick={this.doUp}>Power Up</button>\r\n                        <button onClick={this.doDown}>Power Down</button>\r\n                        <button onClick={this.doEdit}>Edit</button>\r\n                    </td>\r\n                </tr>\r\n                */\r\n                <CrudListItem key={index} index={index} item={item} {...this.props}></CrudListItem>\r\n                \r\n            );\r\n        })\r\n\r\n\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>NAME</th>\r\n                        <th>POWER</th>\r\n                        <th>CRUD</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {arrs}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\nexport default CrudList;\r\n","C:\\TIS20201129.VueReact\\VueReact\\React\\rt37.CrudReact\\crudreact\\src\\components\\crud\\CrudListItem.js",["41"],"//외부에서 컴포넌트 불러오기\r\nimport React, { Component } from 'react';\r\n\r\nclass CrudListItem extends React.Component {\r\n    \r\n    static defaultProps = {  /*  props의 디폴트 값 설정 */  } \r\n    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ } \r\n    state = {\r\n        // 상태값(변수)을 정의한다.\r\n        isEditMode : false,\r\n    }\r\n    style = {\r\n        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.\r\n\r\n    }\r\n    func = {\r\n        // func에 정의된 메서드는 반드시 constructor에서 this bind() 해야 한다.\r\n\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // this 바인딩 // func 에 정의한 매서드는 반드시 this bind 처리해야 한다.\r\n        \r\n        // ref 만들기\r\n        this.refName = React.createRef();\r\n        this.refPower = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        // 마운트 완료 후에  : 페이지 load 될 때 한번\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 업데이트 완료 후에 : 여러번, state 가 변경될 때마다\r\n    }\r\n    componentWillUnmount() {\r\n        // 언마운트 완료 후에 : 페이지 unload 될 때 한번\r\n        //사용되는 경우 : 이벤트 핸들러 해제, redux 구독 해제\r\n    }\r\n    doDel = (event)=>{\r\n        //state 변경 . state는 부모에 있다 -> 부모 메서드 호출\r\n        //부모 콜백 메서드 호출\r\n        const item = this.props.item;\r\n        const index = this.props.index;\r\n        this.props.doDel(index, item);\r\n\r\n    }\r\n    doUp = (event)=>{\r\n        const item = this.props.item;\r\n        const index = this.props.index;\r\n        this.props.doUp(index, item);\r\n\r\n    }\r\n    doDown = (event)=>{\r\n        const item = this.props.item;\r\n        const index = this.props.index;\r\n        this.props.doDown(index, item);\r\n    }\r\n    doEdit = (event)=>{\r\n        \r\n        //this.state.isEditMode = !this.state.isEditMode;\r\n        this.setState({\r\n            ...this.state,\r\n            isEditMode: !this.state.isEditMode\r\n        })\r\n\r\n    }\r\n    doSave = (event) => {\r\n        //debugger;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            isEditMode : !this.state.isEditMode\r\n        });\r\n\r\n        //newitem 만들기\r\n        let newitem = this.props.item;\r\n        newitem.name = this.refName.current.value;\r\n        newitem.power = Number(this.refPower.current.value);\r\n\r\n        //부모 콜백 메서드 호출\r\n        this.props.doSave(newitem);\r\n    }\r\n    render() {\r\n        const {index, item} = this.props; //분해할당\r\n\r\n        const formView = (\r\n            <tr key={index} className=\"\">\r\n                <td>{item.id}</td>\r\n                <td>{item.name}</td>\r\n                <td>{item.power}</td>\r\n                <td>\r\n                    <button onClick={this.doDel}>Del</button>\r\n                    <button onClick={this.doUp}>Power Up</button>\r\n                    <button onClick={this.doDown}>Power Down</button>\r\n                    <button onClick={this.doEdit}>Edit</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n        const formEdit =(\r\n\r\n            <tr key={index} className=\"\">\r\n                <td>{item.id}</td>\r\n                <td>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        ref={this.refName}\r\n                        defaultValue={item.name}\r\n                    />\r\n                </td>\r\n                <td>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"power\"\r\n                        ref={this.refPower }\r\n                        defaultValue={item.power}\r\n                    />\r\n                </td>\r\n                <td>\r\n                    <button onClick={this.doUp}>Power Up</button>\r\n                    <button onClick={this.doDown}>Power Down</button>\r\n                    <button onClick={this.doSave}>Save</button>\r\n                </td>\r\n            </tr>\r\n\r\n            \r\n\r\n        );\r\n        if ( this.state.isEditMode ){\r\n            return formEdit;\r\n        }else{\r\n            return formView;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default CrudListItem;\r\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":21,"column":5,"nodeType":"52","messageId":"53","endLine":27,"endColumn":6},{"ruleId":"46","severity":1,"message":"47","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":26},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]